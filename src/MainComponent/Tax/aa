// InventoryTransactionForm.jsx
import { useEffect, useState } from "react";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const InventoryTransactionForm = ({ handleCancel }) => {
  // ─── Initial form state matching txnSchema ───────────────────────────────────
  const initialForm = {
    txnDate: "", // will set to ISO date-string
    sourceType: "",
    sourceId: "",
    sourceLine: 1,

    item: "",
    dims: {
      site: "",
      warehouse: "",
      zone: "",
      location: "",
      aisle: "",
      rack: "",
      shelf: "",
      bin: "",

      config: "",
      color: "",
      size: "",
      style: "",
      version: "",
      batch: "",
      serial: "",
    },

    qty: 0,
    costPrice: 0,
    purchasePrice: 0,
    salesPrice: 0,
    transferPrice: 0,

    taxes: {
      gst: 0,
      withholdingTax: 0,
    },

    extras: "",
  };

  const [form, setForm] = useState(initialForm);

  // ─── Lookup lists ────────────────────────────────────────────────────────────
  const [items, setItems] = useState([]);
  const [sites, setSites] = useState([]);
  const [warehouses, setWarehouses] = useState([]);
  const [zones, setZones] = useState([]);
  const [locations, setLocations] = useState([]);
  const [aisles, setAisles] = useState([]);
  const [racks, setRacks] = useState([]);
  const [shelves, setShelves] = useState([]);
  const [bins, setBins] = useState([]);

  const [configs, setConfigs] = useState([]);
  const [colors, setColors] = useState([]);
  const [sizes, setSizes] = useState([]);
  const [styles, setStyles] = useState([]);
  const [versions, setVersions] = useState([]);
  const [batches, setBatches] = useState([]);
  const [serials, setSerials] = useState([]);

  // ─── Endpoint bases ───────────────────────────────────────────────────────────
  const apiBase = "https://fms-qkmw.onrender.com/fms/api/v0/inventorytransactions";
  const itemsBaseUrl = "https://fms-qkmw.onrender.com/fms/api/v0/items";
  const sitesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/sites";
  const warehousesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/warehouses";
  const zonesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/zones";
  const locationsUrl = "https://fms-qkmw.onrender.com/fms/api/v0/locations";
  const aislesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/aisles";
  const racksUrl = "https://fms-qkmw.onrender.com/fms/api/v0/racks";
  const shelvesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/shelves";
  const binsUrl = "https://fms-qkmw.onrender.com/fms/api/v0/bins";

  const configsUrl = "https://fms-qkmw.onrender.com/fms/api/v0/configurations";
  const colorsUrl = "https://fms-qkmw.onrender.com/fms/api/v0/colors";
  const sizesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/sizes";
  const stylesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/styles";
  const versionsUrl = "https://fms-qkmw.onrender.com/fms/api/v0/versions";
  const batchesUrl = "https://fms-qkmw.onrender.com/fms/api/v0/batches";
  const serialsUrl = "https://fms-qkmw.onrender.com/fms/api/v0/serials";

  // ─── Fetch all lookups on mount ───────────────────────────────────────────────
  useEffect(() => {
    const fetchAll = async () => {
      try {
        const [
          itemsRes,
          sitesRes,
          warehousesRes,
          zonesRes,
          locationsRes,
          aislesRes,
          racksRes,
          shelvesRes,
          binsRes,
          configsRes,
          colorsRes,
          sizesRes,
          stylesRes,
          versionsRes,
          batchesRes,
          serialsRes,
        ] = await Promise.all([
          axios.get(itemsBaseUrl),
          axios.get(sitesUrl),
          axios.get(warehousesUrl),
          axios.get(zonesUrl),
          axios.get(locationsUrl),
          axios.get(aislesUrl),
          axios.get(racksUrl),
          axios.get(shelvesUrl),
          axios.get(binsUrl),
          axios.get(configsUrl),
          axios.get(colorsUrl),
          axios.get(sizesUrl),
          axios.get(stylesUrl),
          axios.get(versionsUrl),
          axios.get(batchesUrl),
          axios.get(serialsUrl),
        ]);

        setItems(itemsRes.data || []);
        setSites(sitesRes.data || []);
        setWarehouses(warehousesRes.data || []);
        setZones(zonesRes.data || []);
        setLocations(locationsRes.data || []);
        setAisles(aislesRes.data || []);
        setRacks(racksRes.data || []);
        setShelves(shelvesRes.data || []);
        setBins(binsRes.data || []);

        setConfigs(configsRes.data || []);
        setColors(colorsRes.data || []);
        setSizes(sizesRes.data || []);
        setStyles(stylesRes.data || []);
        setVersions(versionsRes.data || []);
        setBatches(batchesRes.data || []);
        setSerials(serialsRes.data || []);
      } catch (err) {
        console.error("Error fetching lookup data:", err);
        toast.error("Failed to load lookup lists", { autoClose: 2000 });
      }
    };

    fetchAll();
  }, []);

  // ─── Handlers for top‐level fields ────────────────────────────────────────────
  const handleFieldChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: name === "sourceLine" ? Number(value) : value,
    }));
  };

  const handleDateChange = (e) => {
    setForm((prev) => ({
      ...prev,
      txnDate: e.target.value,
    }));
  };

  // ─── Handlers for nested dims ────────────────────────────────────────────────
  const handleDimsChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      dims: {
        ...prev.dims,
        [name]: value,
      },
    }));
  };

  // ─── Handlers for nested taxes ───────────────────────────────────────────────
  const handleTaxChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      taxes: {
        ...prev.taxes,
        [name]: Number(value),
      },
    }));
  };

  // ─── Handler for extras (as JSON string) ─────────────────────────────────────
  const handleExtrasChange = (e) => {
    setForm((prev) => ({
      ...prev,
      extras: e.target.value,
    }));
  };

  // ─── Form submission ─────────────────────────────────────────────────────────
  const createTransaction = async (e) => {
    e.preventDefault();
    try {
      // Parse extras as JSON if possible
      let extrasObj = {};
      if (form.extras.trim()) {
        try {
          extrasObj = JSON.parse(form.extras);
        } catch {
          toast.error("Extras must be valid JSON", { autoClose: 2000 });
          return;
        }
      }

      const payload = {
        txnDate: form.txnDate,
        sourceType: form.sourceType,
        sourceId: form.sourceId,
        sourceLine: form.sourceLine,
        item: form.item,
        dims: {
          site: form.dims.site,
          warehouse: form.dims.warehouse,
          zone: form.dims.zone,
          location: form.dims.location,
          aisle: form.dims.aisle,
          rack: form.dims.rack,
          shelf: form.dims.shelf,
          bin: form.dims.bin,
          config: form.dims.config,
          color: form.dims.color,
          size: form.dims.size,
          style: form.dims.style,
          version: form.dims.version,
          batch: form.dims.batch,
          serial: form.dims.serial,
        },
        qty: Number(form.qty),
        costPrice: Number(form.costPrice),
        purchasePrice: Number(form.purchasePrice),
        salesPrice: Number(form.salesPrice),
        transferPrice: Number(form.transferPrice),
        taxes: {
          gst: Number(form.taxes.gst),
          withholdingTax: Number(form.taxes.withholdingTax),
        },
        extras: extrasObj,
      };

      await axios.post(apiBase, payload, {
        headers: { "Content-Type": "application/json" },
      });
      toast.success("Inventory transaction saved", {
        autoClose: 1200,
        onClose: () => handleCancel(),
      });
    } catch (err) {
      console.error("Error creating transaction:", err.response || err);
      const msg = err.response?.data?.message || "Couldn’t save transaction";
      toast.error(msg, { autoClose: 2000 });
    }
  };

  // ─── Reset form to initial ───────────────────────────────────────────────────
  const handleReset = () => {
    setForm(initialForm);
  };

  return (
    <div className="max-w-3xl mx-auto p-4">
      <ToastContainer />
      {/* Header */}
      <div className="mb-4">
        <h2 className="text-2xl font-semibold">Inventory Transaction Form</h2>
      </div>

      <form
        onSubmit={createTransaction}
        className="bg-white shadow rounded-lg divide-y divide-gray-200"
      >
        {/* ─── Transaction Details ──────────────────────────────────────────────── */}
        <section className="p-6">
          <h3 className="text-lg font-medium text-gray-700 mb-4">
            Transaction Details
          </h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* txnDate */}
            <div>
              <label
                htmlFor="txnDate"
                className="block text-sm font-medium text-gray-600"
              >
                Transaction Date
              </label>
              <input
                type="date"
                id="txnDate"
                name="txnDate"
                value={form.txnDate}
                onChange={handleDateChange}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* sourceType */}
            <div>
              <label
                htmlFor="sourceType"
                className="block text-sm font-medium text-gray-600"
              >
                Source Type
              </label>
              <select
                id="sourceType"
                name="sourceType"
                value={form.sourceType}
                onChange={handleFieldChange}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Type</option>
                <option value="JOURNAL">JOURNAL</option>
                <option value="JOURNAL_PROV">JOURNAL_PROV</option>
                <option value="PURCHASE">PURCHASE</option>
                <option value="SALES">SALES</option>
                <option value="TRANSFER">TRANSFER</option>
                <option value="ADJUSTMENT">ADJUSTMENT</option>
                <option value="COUNTING">COUNTING</option>
              </select>
            </div>

            {/* sourceId */}
            <div>
              <label
                htmlFor="sourceId"
                className="block text-sm font-medium text-gray-600"
              >
                Source ID (ObjectId)
              </label>
              <input
                type="text"
                id="sourceId"
                name="sourceId"
                value={form.sourceId}
                onChange={handleFieldChange}
                placeholder="e.g. 605c72e... (ObjectId)"
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* sourceLine */}
            <div>
              <label
                htmlFor="sourceLine"
                className="block text-sm font-medium text-gray-600"
              >
                Source Line #
              </label>
              <input
                type="number"
                id="sourceLine"
                name="sourceLine"
                value={form.sourceLine}
                onChange={handleFieldChange}
                min={1}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* item */}
            <div>
              <label
                htmlFor="item"
                className="block text-sm font-medium text-gray-600"
              >
                Item
              </label>
              <select
                id="item"
                name="item"
                value={form.item}
                onChange={handleFieldChange}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Item</option>
                {items.map((itm) => (
                  <option key={itm._id} value={itm._id}>
                    {itm.name || itm.code || itm._id}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </section>

        {/* ─── Dimensions (dims) ───────────────────────────────────────────────────── */}
        <section className="p-6 bg-gray-50">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Dimensions</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* site */}
            <div>
              <label
                htmlFor="site"
                className="block text-sm font-medium text-gray-600"
              >
                Site
              </label>
              <select
                id="site"
                name="site"
                value={form.dims.site}
                onChange={handleDimsChange}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Site</option>
                {sites.map((s) => (
                  <option key={s._id} value={s._id}>
                    {s.name || s.code || s._id}
                  </option>
                ))}
              </select>
            </div>

            {/* warehouse */}
            <div>
              <label
                htmlFor="warehouse"
                className="block text-sm font-medium text-gray-600"
              >
                Warehouse
              </label>
              <select
                id="warehouse"
                name="warehouse"
                value={form.dims.warehouse}
                onChange={handleDimsChange}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Warehouse</option>
                {warehouses.map((w) => (
                  <option key={w._id} value={w._id}>
                    {w.name || w.code || w._id}
                  </option>
                ))}
              </select>
            </div>

            {/* zone */}
            <div>
              <label
                htmlFor="zone"
                className="block text-sm font-medium text-gray-600"
              >
                Zone
              </label>
              <select
                id="zone"
                name="zone"
                value={form.dims.zone}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Zone</option>
                {zones.map((z) => (
                  <option key={z._id} value={z._id}>
                    {z.name || z.code || z._id}
                  </option>
                ))}
              </select>
            </div>

            {/* location */}
            <div>
              <label
                htmlFor="location"
                className="block text-sm font-medium text-gray-600"
              >
                Location
              </label>
              <select
                id="location"
                name="location"
                value={form.dims.location}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Location</option>
                {locations.map((loc) => (
                  <option key={loc._id} value={loc._id}>
                    {loc.name || loc.code || loc._id}
                  </option>
                ))}
              </select>
            </div>

            {/* aisle */}
            <div>
              <label
                htmlFor="aisle"
                className="block text-sm font-medium text-gray-600"
              >
                Aisle
              </label>
              <select
                id="aisle"
                name="aisle"
                value={form.dims.aisle}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Aisle</option>
                {aisles.map((a) => (
                  <option key={a._id} value={a._id}>
                    {a.name || a.code || a._id}
                  </option>
                ))}
              </select>
            </div>

            {/* rack */}
            <div>
              <label
                htmlFor="rack"
                className="block text-sm font-medium text-gray-600"
              >
                Rack
              </label>
              <select
                id="rack"
                name="rack"
                value={form.dims.rack}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Rack</option>
                {racks.map((r) => (
                  <option key={r._id} value={r._id}>
                    {r.name || r.code || r._id}
                  </option>
                ))}
              </select>
            </div>

            {/* shelf */}
            <div>
              <label
                htmlFor="shelf"
                className="block text-sm font-medium text-gray-600"
              >
                Shelf
              </label>
              <select
                id="shelf"
                name="shelf"
                value={form.dims.shelf}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Shelf</option>
                {shelves.map((sh) => (
                  <option key={sh._id} value={sh._id}>
                    {sh.name || sh.code || sh._id}
                  </option>
                ))}
              </select>
            </div>

            {/* bin */}
            <div>
              <label
                htmlFor="bin"
                className="block text-sm font-medium text-gray-600"
              >
                Bin
              </label>
              <select
                id="bin"
                name="bin"
                value={form.dims.bin}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Bin</option>
                {bins.map((b) => (
                  <option key={b._id} value={b._id}>
                    {b.name || b.code || b._id}
                  </option>
                ))}
              </select>
            </div>

            {/* config */}
            <div>
              <label
                htmlFor="config"
                className="block text-sm font-medium text-gray-600"
              >
                Configuration
              </label>
              <select
                id="config"
                name="config"
                value={form.dims.config}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Configuration</option>
                {configs.map((c) => (
                  <option key={c._id} value={c._id}>
                    {c.name || c.code || c._id}
                  </option>
                ))}
              </select>
            </div>

            {/* color */}
            <div>
              <label
                htmlFor="color"
                className="block text-sm font-medium text-gray-600"
              >
                Color
              </label>
              <select
                id="color"
                name="color"
                value={form.dims.color}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Color</option>
                {colors.map((c) => (
                  <option key={c._id} value={c._id}>
                    {c.name || c.code || c._id}
                  </option>
                ))}
              </select>
            </div>

            {/* size */}
            <div>
              <label
                htmlFor="size"
                className="block text-sm font-medium text-gray-600"
              >
                Size
              </label>
              <select
                id="size"
                name="size"
                value={form.dims.size}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Size</option>
                {sizes.map((s) => (
                  <option key={s._id} value={s._id}>
                    {s.name || s.code || s._id}
                  </option>
                ))}
              </select>
            </div>

            {/* style */}
            <div>
              <label
                htmlFor="style"
                className="block text-sm font-medium text-gray-600"
              >
                Style
              </label>
              <select
                id="style"
                name="style"
                value={form.dims.style}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Style</option>
                {styles.map((st) => (
                  <option key={st._id} value={st._id}>
                    {st.name || st.code || st._id}
                  </option>
                ))}
              </select>
            </div>

            {/* version */}
            <div>
              <label
                htmlFor="version"
                className="block text-sm font-medium text-gray-600"
              >
                Version
              </label>
              <select
                id="version"
                name="version"
                value={form.dims.version}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Version</option>
                {versions.map((v) => (
                  <option key={v._id} value={v._id}>
                    {v.name || v.code || v._id}
                  </option>
                ))}
              </select>
            </div>

            {/* batch */}
            <div>
              <label
                htmlFor="batch"
                className="block text-sm font-medium text-gray-600"
              >
                Batch
              </label>
              <select
                id="batch"
                name="batch"
                value={form.dims.batch}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Batch</option>
                {batches.map((b) => (
                  <option key={b._id} value={b._id}>
                    {b.name || b.code || b._id}
                  </option>
                ))}
              </select>
            </div>

            {/* serial */}
            <div>
              <label
                htmlFor="serial"
                className="block text-sm font-medium text-gray-600"
              >
                Serial
              </label>
              <select
                id="serial"
                name="serial"
                value={form.dims.serial}
                onChange={handleDimsChange}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select Serial</option>
                {serials.map((s) => (
                  <option key={s._id} value={s._id}>
                    {s.serialNumber || s._id}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </section>

        {/* ─── Quantity & Pricing ─────────────────────────────────────────────────── */}
        <section className="p-6">
          <h3 className="text-lg font-medium text-gray-700 mb-4">
            Quantity & Pricing
          </h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* qty */}
            <div>
              <label
                htmlFor="qty"
                className="block text-sm font-medium text-gray-600"
              >
                Quantity
              </label>
              <input
                type="number"
                id="qty"
                name="qty"
                value={form.qty}
                onChange={handleFieldChange}
                min={0}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* costPrice */}
            <div>
              <label
                htmlFor="costPrice"
                className="block text-sm font-medium text-gray-600"
              >
                Cost Price
              </label>
              <input
                type="number"
                step="0.01"
                id="costPrice"
                name="costPrice"
                value={form.costPrice}
                onChange={handleFieldChange}
                min={0}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* purchasePrice */}
            <div>
              <label
                htmlFor="purchasePrice"
                className="block text-sm font-medium text-gray-600"
              >
                Purchase Price
              </label>
              <input
                type="number"
                step="0.01"
                id="purchasePrice"
                name="purchasePrice"
                value={form.purchasePrice}
                onChange={handleFieldChange}
                min={0}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* salesPrice */}
            <div>
              <label
                htmlFor="salesPrice"
                className="block text-sm font-medium text-gray-600"
              >
                Sales Price
              </label>
              <input
                type="number"
                step="0.01"
                id="salesPrice"
                name="salesPrice"
                value={form.salesPrice}
                onChange={handleFieldChange}
                min={0}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* transferPrice */}
            <div>
              <label
                htmlFor="transferPrice"
                className="block text-sm font-medium text-gray-600"
              >
                Transfer Price
              </label>
              <input
                type="number"
                step="0.01"
                id="transferPrice"
                name="transferPrice"
                value={form.transferPrice}
                onChange={handleFieldChange}
                min={0}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>
          </div>
        </section>

        {/* ─── Taxes ───────────────────────────────────────────────────────────────── */}
        <section className="p-6 bg-gray-50">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Taxes</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* gst */}
            <div>
              <label
                htmlFor="gst"
                className="block text-sm font-medium text-gray-600"
              >
                GST (%)
              </label>
              <input
                type="number"
                step="0.01"
                id="gst"
                name="gst"
                value={form.taxes.gst}
                onChange={handleTaxChange}
                min={0}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* withholdingTax */}
            <div>
              <label
                htmlFor="withholdingTax"
                className="block text-sm font-medium text-gray-600"
              >
                Withholding Tax (%)
              </label>
              <input
                type="number"
                step="0.01"
                id="withholdingTax"
                name="withholdingTax"
                value={form.taxes.withholdingTax}
                onChange={handleTaxChange}
                min={0}
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>
          </div>
        </section>

        {/* ─── Extras (JSON) ──────────────────────────────────────────────────────── */}
        <section className="p-6">
          <h3 className="text-lg font-medium text-gray-700 mb-4">Extras (JSON)</h3>
          <div>
            <textarea
              id="extras"
              name="extras"
              rows={4}
              value={form.extras}
              onChange={handleExtrasChange}
              placeholder='e.g. {"key1": "value1", "flag": true}'
              className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
            />
          </div>
        </section>

        {/* ─── Action Buttons ─────────────────────────────────────────────────────── */}
        <div className="py-6 flex items-center justify-between px-6 bg-white">
          <button
            type="button"
            onClick={handleReset}
            className="text-gray-500 hover:text-gray-700 text-sm"
          >
            Reset
          </button>
          <div className="flex gap-4">
            <button
              type="button"
              onClick={handleCancel}
              className="px-6 py-2 bg-gray-200 rounded hover:bg-gray-300 transition"
            >
              Go Back
            </button>
            <button
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              Create
            </button>
          </div>
        </div>
      </form>
    </div>
  );
};

export default InventoryTransactionForm;
