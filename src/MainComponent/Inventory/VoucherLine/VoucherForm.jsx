import React, { useState, useEffect } from "react";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function SiteForm({ handleCancel, onSaved }) {
  // ─── 1) INITIAL STATE ────────────────────────────────────────────────────────
  const initialLine = {
    accountCode: "",
    debit: 0,
    credit: 0,
    currency: "",
    exchangeRate: 1,
    // localAmount will be computed on the fly in JSX
    dims: {
      site: "",
      warehouse: "",
      zone: "",
      location: "",
      aisle: "",
      rack: "",
      shelf: "",
      bin: "",
      config: "",
      color: "",
      size: "",
      style: "",
      version: "",
      batch: "",
      serial: "",
    },
    subledger: {
      sourceType: "", // INVENTORY, AR, TAX, WHT, CHARGES, LINE_AR, FX, DISCOUNT
      txnId: "",
      lineNum: 1,
    },
    extras: {}, // optional JSON map
  };

  const initialForm = {
    voucherNo: "", // ideally auto-generated by backend
    voucherDate: "", // YYYY-MM-DD
    name: "", // “Voucher Name”
    sourceType: "", // SALES_ORDER, SALES_INVOICE, PURCHASE_ORDER, JOURNAL
    sourceId: "", // e.g. MongoDB ObjectId
    invoiceRef: {
      invoiceId: "",
      invoiceNum: "",
    },
    company: "", // selected company _id
    lines: [{ ...initialLine }],
  };

  // ─── 2) LOCAL STATE ───────────────────────────────────────────────────────────
  const [form, setForm] = useState(initialForm);

  // Lookup lists for all dimensions + companies
  const [sites, setSites] = useState([]);
  const [warehouses, setWarehouses] = useState([]);
  const [zones, setZones] = useState([]);
  const [locations, setLocations] = useState([]);
  const [aisles, setAisles] = useState([]);
  const [racks, setRacks] = useState([]);
  const [shelves, setShelves] = useState([]);
  const [bins, setBins] = useState([]);
  const [configs, setConfigs] = useState([]);
  const [colors, setColors] = useState([]);
  const [sizes, setSizes] = useState([]);
  const [stylesList, setStylesList] = useState([]);
  const [versions, setVersions] = useState([]);
  const [batches, setBatches] = useState([]);
  const [serials, setSerials] = useState([]);

  const [companies, setCompanies] = useState([]);

  // Base URL for posting vouchers
  const apiBase = "https://fms-qkmw.onrender.com/fms/api/v0/FinancialVouchers";

  // ─── 3) FETCH ALL LOOKUPS ONCE ─────────────────────────────────────────────────
  useEffect(() => {
    const fetchList = async (url, setter) => {
      try {
        const res = await axios.get(url);
        const data = res.data.data || res.data || [];
        setter(data);
      } catch (err) {
        console.error(`Error fetching ${url}:`, err);
        toast.error(`Failed to load data from ${url}`);
      }
    };

    // Dimension endpoints
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Sites", setSites);
    fetchList(
      "https://fms-qkmw.onrender.com/fms/api/v0/Warehouses",
      setWarehouses
    );
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Zones", setZones);
    fetchList(
      "https://fms-qkmw.onrender.com/fms/api/v0/Locations",
      setLocations
    );
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Aisles", setAisles);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Racks", setRacks);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Shelves", setShelves);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Bins", setBins);
    fetchList(
      "https://fms-qkmw.onrender.com/fms/api/v0/Configurations",
      setConfigs
    );
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Colors", setColors);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Sizes", setSizes);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Styles", setStylesList);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Versions", setVersions);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Batches", setBatches);
    fetchList("https://fms-qkmw.onrender.com/fms/api/v0/Serials", setSerials);

    // Companies endpoint
    fetchList(
      "https://fms-qkmw.onrender.com/fms/api/v0/Companies",
      setCompanies
    );
  }, []);

  // ─── 4) HANDLERS ────────────────────────────────────────────────────────────────

  // Top-level voucher fields: voucherNo, voucherDate, name, sourceType, sourceId, company
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // invoiceRef fields (invoiceId, invoiceNum)
  const handleInvoiceRefChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      invoiceRef: {
        ...prev.invoiceRef,
        [name]: value,
      },
    }));
  };

  // Line-level changes (accountCode, debit, credit, currency, exchangeRate, dims.*, subledger.*)
  const handleLineChange = (idx, e) => {
    const { name, value, dataset } = e.target;
    const updatedLines = [...form.lines];
    const line = { ...updatedLines[idx] };

    // Update nested subledger
    if (dataset.group === "subledger") {
      const field = name.split(".")[1];
      line.subledger = {
        ...line.subledger,
        [field]: field === "lineNum" ? Number(value) : value,
      };
    }
    // Update nested dims
    else if (dataset.group === "dims") {
      const field = name.split(".")[1];
      line.dims = {
        ...line.dims,
        [field]: value,
      };
    }
    // Top-level line fields
    else {
      if (name === "debit" || name === "credit" || name === "exchangeRate") {
        line[name] = Number(value);
      } else {
        line[name] = value;
      }
    }

    updatedLines[idx] = line;
    setForm((prev) => ({ ...prev, lines: updatedLines }));
  };

  // Add a new blank line
  const addLine = () => {
    setForm((prev) => {
      const nextLineNum = prev.lines.length + 1;
      const newLine = {
        ...initialLine,
        subledger: { ...initialLine.subledger, lineNum: nextLineNum },
      };
      return { ...prev, lines: [...prev.lines, newLine] };
    });
  };

  // Remove a line (and re-index lineNum)
  const removeLine = (idx) => {
    setForm((prev) => {
      const filtered = prev.lines.filter((_, i) => i !== idx);
      // Re-assign lineNum in order
      const reindexed = filtered.map((ln, i) => ({
        ...ln,
        subledger: { ...ln.subledger, lineNum: i + 1 },
      }));
      return { ...prev, lines: reindexed };
    });
  };

  // Submit the entire voucher
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const payload = {
        voucherNo: form.voucherNo,
        voucherDate: form.voucherDate,
        name: form.name,
        sourceType: form.sourceType,
        sourceId: form.sourceId,
        invoiceRef: {
          invoiceId: form.invoiceRef.invoiceId,
          invoiceNum: form.invoiceRef.invoiceNum,
        },
        company: form.company,
        lines: form.lines.map((ln) => ({
          accountCode: ln.accountCode,
          debit: ln.debit,
          credit: ln.credit,
          currency: ln.currency,
          exchangeRate: ln.exchangeRate,
          dims: { ...ln.dims },
          subledger: {
            sourceType: ln.subledger.sourceType,
            txnId: ln.subledger.txnId,
            lineNum: ln.subledger.lineNum,
          },
          extras: ln.extras || {},
        })),
      };

      await axios.post(apiBase, payload);
      toast.success("Voucher created successfully!");

      // Reset form after a moment (and call onSaved/handleCancel if provided)
      setTimeout(() => {
        setForm(initialForm);
        if (onSaved) onSaved();
        if (handleCancel) handleCancel();
      }, 1000);
    } catch (err) {
      console.error("Error saving voucher:", err);
      const msg =
        err.response?.data?.message || "Failed to create voucher. See console.";
      toast.error(msg);
    }
  };

  // ─── 5) RENDER ─────────────────────────────────────────────────────────────────
  return (
    <div>
      <ToastContainer />

      <div className="flex items-center space-x-2 mb-4">
        <h3 className="text-xl font-semibold">Voucher Form</h3>
      </div>

      <form
        onSubmit={handleSubmit}
        className="bg-white rounded-lg divide-y divide-gray-200"
      >
        {/* ── Voucher Details Section ───────────────────────────────────── */}
        <section className="p-6">
          <h2 className="text-lg font-medium text-gray-700 mb-4">
            Voucher Details
          </h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* Voucher No (read-only/auto) */}
            <div>
              <label
                htmlFor="voucherNo"
                className="block text-sm font-medium text-gray-600"
              >
                Voucher No
              </label>
              <input
                type="text"
                name="voucherNo"
                id="voucherNo"
                value={form.voucherNo}
                readOnly
                disabled
                placeholder="Auto-generated"
                className="mt-1 w-full cursor-not-allowed p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* Voucher Date */}
            <div>
              <label
                htmlFor="voucherDate"
                className="block text-sm font-medium text-gray-600"
              >
                Voucher Date
              </label>
              <input
                type="date"
                name="voucherDate"
                id="voucherDate"
                value={form.voucherDate}
                onChange={handleChange}
                required
                className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
              />
            </div>

            {/* Voucher Name */}
            <div>
              <label
                htmlFor="name"
                className="block text-sm font-medium text-gray-600"
              >
                Voucher Name
              </label>
              <input
                type="text"
                name="name"
                id="name"
                value={form.name}
                onChange={handleChange}
                placeholder="e.g. XYZ Enterprises Pvt. Ltd."
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              />
            </div>

            {/* Source Type */}
            <div>
              <label
                htmlFor="sourceType"
                className="block text-sm font-medium text-gray-600"
              >
                Source Type
              </label>
              <select
                name="sourceType"
                id="sourceType"
                value={form.sourceType}
                onChange={handleChange}
                required
                className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
              >
                <option value="">-- Select --</option>
                <option value="SALES_ORDER">Sales Order</option>
                <option value="SALES_INVOICE">Sales Invoice</option>
                <option value="PURCHASE_ORDER">Purchase Order</option>
                <option value="JOURNAL">Journal</option>
              </select>
            </div>

            {/* Source ID */}
            <div>
              <label
                htmlFor="sourceId"
                className="block text-sm font-medium text-gray-600"
              >
                Source ID
              </label>
              <input
                type="text"
                name="sourceId"
                id="sourceId"
                value={form.sourceId}
                onChange={handleChange}
                required
                placeholder="Enter MongoDB ObjectId or ref"
                className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
              />
            </div>

            {/* Invoice Reference ID */}
            <div>
              <label
                htmlFor="invoiceId"
                className="block text-sm font-medium text-gray-600"
              >
                Invoice Reference ID
              </label>
              <input
                type="text"
                name="invoiceId"
                id="invoiceId"
                value={form.invoiceRef.invoiceId}
                onChange={handleInvoiceRefChange}
                required
                placeholder="e.g. SalesOrder ObjectId"
                className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
              />
            </div>

            {/* Invoice Number */}
            <div>
              <label
                htmlFor="invoiceNum"
                className="block text-sm font-medium text-gray-600"
              >
                Invoice Number
              </label>
              <input
                type="text"
                name="invoiceNum"
                id="invoiceNum"
                value={form.invoiceRef.invoiceNum}
                onChange={handleInvoiceRefChange}
                required
                placeholder="e.g. SO-INV-0001"
                className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
              />
            </div>

            {/* Company */}
            <div>
              <label
                htmlFor="company"
                className="block text-sm font-medium text-gray-600"
              >
                Company
              </label>
              <select
                name="company"
                id="company"
                value={form.company}
                onChange={handleChange}
                required
                className="mt-1 w-full p-2 border rounded focus:ring-2 focus:ring-blue-200"
              >
                <option value="">Select a company…</option>
                {companies.length ? (
                  companies.map((c) => (
                    <option key={c._id} value={c._id}>
                      {c.name}
                    </option>
                  ))
                ) : (
                  <option disabled>Loading companies...</option>
                )}
              </select>
            </div>
          </div>
        </section>

        {/* ── Voucher Lines Section ──────────────────────────────────────────────── */}
        <section className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium text-gray-700">Voucher Lines</h2>
            <button
              type="button"
              onClick={addLine}
              className="bg-green-500 text-white px-3 py-1 rounded-md hover:bg-green-600"
            >
              + Add Line
            </button>
          </div>

          {form.lines.map((line, idx) => (
            <div
              key={idx}
              className="border p-4 rounded-md mb-6 bg-gray-50 relative"
            >
              {/* Remove Button */}
              {form.lines.length > 1 && (
                <button
                  type="button"
                  onClick={() => removeLine(idx)}
                  className="absolute top-2 right-2 text-red-600 hover:text-red-800"
                >
                  ✕
                </button>
              )}

              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                {/* Account Code */}
                <div>
                  <label
                    htmlFor={`accountCode-${idx}`}
                    className="block text-sm font-medium text-gray-600"
                  >
                    Account Code
                  </label>
                  <input
                    type="text"
                    name="accountCode"
                    id={`accountCode-${idx}`}
                    value={line.accountCode}
                    onChange={(e) => handleLineChange(idx, e)}
                    required
                    placeholder="GL Account Code"
                    className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                  />
                </div>

                {/* Debit */}
                <div>
                  <label
                    htmlFor={`debit-${idx}`}
                    className="block text-sm font-medium text-gray-600"
                  >
                    Debit
                  </label>
                  <input
                    type="number"
                    name="debit"
                    id={`debit-${idx}`}
                    value={line.debit}
                    onChange={(e) => handleLineChange(idx, e)}
                    min="0"
                    className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                  />
                </div>

                {/* Credit */}
                <div>
                  <label
                    htmlFor={`credit-${idx}`}
                    className="block text-sm font-medium text-gray-600"
                  >
                    Credit
                  </label>
                  <input
                    type="number"
                    name="credit"
                    id={`credit-${idx}`}
                    value={line.credit}
                    onChange={(e) => handleLineChange(idx, e)}
                    min="0"
                    className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                  />
                </div>

                {/* Currency */}
                <div>
                  <label
                    htmlFor={`currency-${idx}`}
                    className="block text-sm font-medium text-gray-600"
                  >
                    Currency
                  </label>
                  <input
                    type="text"
                    name="currency"
                    id={`currency-${idx}`}
                    value={line.currency}
                    onChange={(e) => handleLineChange(idx, e)}
                    required
                    placeholder="e.g. USD, INR"
                    className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                  />
                </div>

                {/* Exchange Rate */}
                <div>
                  <label
                    htmlFor={`exchangeRate-${idx}`}
                    className="block text-sm font-medium text-gray-600"
                  >
                    Exchange Rate
                  </label>
                  <input
                    type="number"
                    step="0.0001"
                    name="exchangeRate"
                    id={`exchangeRate-${idx}`}
                    value={line.exchangeRate}
                    onChange={(e) => handleLineChange(idx, e)}
                    min="0"
                    className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                  />
                </div>

                {/* Local Amount (computed) */}
                <div>
                  <label
                    htmlFor={`localAmount-${idx}`}
                    className="block text-sm font-medium text-gray-600"
                  >
                    Local Amount
                  </label>
                  <input
                    type="number"
                    name="localAmount"
                    id={`localAmount-${idx}`}
                    value={
                      Math.round(
                        (line.debit - line.credit) * line.exchangeRate * 100
                      ) / 100
                    }
                    readOnly
                    disabled
                    className="mt-1 w-full bg-gray-100 border-gray-300 rounded-md p-2"
                  />
                </div>
              </div>

              {/* ── DIMENSIONS GRID ───────────────────────────────────────────── */}
              <div className="mt-6">
                <h4 className="font-medium text-gray-700 mb-2">
                  Dimensions (Optional)
                </h4>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  {/* Site */}
                  <div>
                    <label
                      htmlFor={`dims.site-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Site
                    </label>
                    <select
                      name="dims.site"
                      data-group="dims"
                      id={`dims.site-${idx}`}
                      value={line.dims.site}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {sites.map((s) => (
                        <option key={s._id} value={s._id}>
                          {s.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Warehouse */}
                  <div>
                    <label
                      htmlFor={`dims.warehouse-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Warehouse
                    </label>
                    <select
                      name="dims.warehouse"
                      data-group="dims"
                      id={`dims.warehouse-${idx}`}
                      value={line.dims.warehouse}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {warehouses.map((w) => (
                        <option key={w._id} value={w._id}>
                          {w.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Zone */}
                  <div>
                    <label
                      htmlFor={`dims.zone-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Zone
                    </label>
                    <select
                      name="dims.zone"
                      data-group="dims"
                      id={`dims.zone-${idx}`}
                      value={line.dims.zone}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {zones.map((z) => (
                        <option key={z._id} value={z._id}>
                          {z.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Location */}
                  <div>
                    <label
                      htmlFor={`dims.location-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Location
                    </label>
                    <select
                      name="dims.location"
                      data-group="dims"
                      id={`dims.location-${idx}`}
                      value={line.dims.location}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {locations.map((loc) => (
                        <option key={loc._id} value={loc._id}>
                          {loc.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Aisle */}
                  <div>
                    <label
                      htmlFor={`dims.aisle-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Aisle
                    </label>
                    <select
                      name="dims.aisle"
                      data-group="dims"
                      id={`dims.aisle-${idx}`}
                      value={line.dims.aisle}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {aisles.map((a) => (
                        <option key={a._id} value={a._id}>
                          {a.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Rack */}
                  <div>
                    <label
                      htmlFor={`dims.rack-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Rack
                    </label>
                    <select
                      name="dims.rack"
                      data-group="dims"
                      id={`dims.rack-${idx}`}
                      value={line.dims.rack}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {racks.map((r) => (
                        <option key={r._id} value={r._id}>
                          {r.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Shelf */}
                  <div>
                    <label
                      htmlFor={`dims.shelf-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Shelf
                    </label>
                    <select
                      name="dims.shelf"
                      data-group="dims"
                      id={`dims.shelf-${idx}`}
                      value={line.dims.shelf}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {shelves.map((sh) => (
                        <option key={sh._id} value={sh._id}>
                          {sh.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Bin */}
                  <div>
                    <label
                      htmlFor={`dims.bin-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Bin
                    </label>
                    <select
                      name="dims.bin"
                      data-group="dims"
                      id={`dims.bin-${idx}`}
                      value={line.dims.bin}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {bins.map((b) => (
                        <option key={b._id} value={b._id}>
                          {b.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Configuration */}
                  <div>
                    <label
                      htmlFor={`dims.config-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Config
                    </label>
                    <select
                      name="dims.config"
                      data-group="dims"
                      id={`dims.config-${idx}`}
                      value={line.dims.config}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {configs.map((c) => (
                        <option key={c._id} value={c._id}>
                          {c.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Color */}
                  <div>
                    <label
                      htmlFor={`dims.color-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Color
                    </label>
                    <select
                      name="dims.color"
                      data-group="dims"
                      id={`dims.color-${idx}`}
                      value={line.dims.color}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {colors.map((c) => (
                        <option key={c._id} value={c._id}>
                          {c.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Size */}
                  <div>
                    <label
                      htmlFor={`dims.size-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Size
                    </label>
                    <select
                      name="dims.size"
                      data-group="dims"
                      id={`dims.size-${idx}`}
                      value={line.dims.size}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {sizes.map((sz) => (
                        <option key={sz._id} value={sz._id}>
                          {sz.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Style */}
                  <div>
                    <label
                      htmlFor={`dims.style-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Style
                    </label>
                    <select
                      name="dims.style"
                      data-group="dims"
                      id={`dims.style-${idx}`}
                      value={line.dims.style}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {stylesList.map((st) => (
                        <option key={st._id} value={st._id}>
                          {st.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Version */}
                  <div>
                    <label
                      htmlFor={`dims.version-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Version
                    </label>
                    <select
                      name="dims.version"
                      data-group="dims"
                      id={`dims.version-${idx}`}
                      value={line.dims.version}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {versions.map((v) => (
                        <option key={v._id} value={v._id}>
                          {v.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Batch */}
                  <div>
                    <label
                      htmlFor={`dims.batch-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Batch
                    </label>
                    <select
                      name="dims.batch"
                      data-group="dims"
                      id={`dims.batch-${idx}`}
                      value={line.dims.batch}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {batches.map((bch) => (
                        <option key={bch._id} value={bch._id}>
                          {bch.num} – {bch.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Serial */}
                  <div>
                    <label
                      htmlFor={`dims.serial-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Serial
                    </label>
                    <select
                      name="dims.serial"
                      data-group="dims"
                      id={`dims.serial-${idx}`}
                      value={line.dims.serial}
                      onChange={(e) => handleLineChange(idx, e)}
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- None --</option>
                      {serials.map((s) => (
                        <option key={s._id} value={s._id}>
                          {s.num} – {s.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              {/* ── SUBLEDGER GRID ───────────────────────────────────────────────── */}
              <div className="mt-6">
                <h4 className="font-medium text-gray-700 mb-2">Subledger</h4>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  {/* Subledger Type */}
                  <div>
                    <label
                      htmlFor={`subledger.sourceType-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Subledger Type
                    </label>
                    <select
                      name="subledger.sourceType"
                      data-group="subledger"
                      id={`subledger.sourceType-${idx}`}
                      value={line.subledger.sourceType}
                      onChange={(e) => handleLineChange(idx, e)}
                      required
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    >
                      <option value="">-- Select --</option>
                      <option value="INVENTORY">Inventory</option>
                      <option value="AR">AR</option>
                      <option value="TAX">Tax</option>
                      <option value="WHT">Withholding Tax</option>
                      <option value="CHARGES">Charges</option>
                      <option value="LINE_AR">Line AR</option>
                      <option value="FX">FX</option>
                      <option value="DISCOUNT">Discount</option>
                    </select>
                  </div>

                  {/* Subledger Txn ID */}
                  <div>
                    <label
                      htmlFor={`subledger.txnId-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Txn ID
                    </label>
                    <input
                      type="text"
                      name="subledger.txnId"
                      data-group="subledger"
                      id={`subledger.txnId-${idx}`}
                      value={line.subledger.txnId}
                      onChange={(e) => handleLineChange(idx, e)}
                      placeholder="MongoDB ObjectId"
                      required
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    />
                  </div>

                  {/* Subledger Line Number */}
                  <div>
                    <label
                      htmlFor={`subledger.lineNum-${idx}`}
                      className="block text-sm text-gray-600 mb-1"
                    >
                      Line #
                    </label>
                    <input
                      type="number"
                      name="subledger.lineNum"
                      data-group="subledger"
                      id={`subledger.lineNum-${idx}`}
                      value={line.subledger.lineNum}
                      onChange={(e) => handleLineChange(idx, e)}
                      min="1"
                      required
                      className="mt-1 w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500"
                    />
                  </div>
                </div>
              </div>

              {/* ── EXTRAS JSON TEXTAREA ───────────────────────────────────────────── */}
              <div className="mt-6">
                <label
                  htmlFor={`extras-${idx}`}
                  className="block text-sm font-medium text-gray-600 mb-1"
                >
                  Extras (JSON)
                </label>
                <textarea
                  id={`extras-${idx}`}
                  name="extras"
                  rows={3}
                  value={JSON.stringify(line.extras, null, 2)}
                  onChange={(e) => {
                    try {
                      const parsed = JSON.parse(e.target.value);
                      const updatedLines = [...form.lines];
                      updatedLines[idx].extras = parsed;
                      setForm((prev) => ({
                        ...prev,
                        lines: updatedLines,
                      }));
                    } catch {
                      // ignore parse errors while typing
                    }
                  }}
                  className="w-full border-gray-300 rounded-md p-2 focus:ring-indigo-500 font-mono text-sm bg-white"
                  placeholder='e.g. {"customField": "value"}'
                />
              </div>
            </div>
          ))}
        </section>

        {/* ── FORM ACTIONS (Reset/Go Back/Create) ────────────────────────────────── */}
        <div className="py-6 px-6 flex items-center justify-between border-t border-gray-200">
          {/* You can wire up a custom “Reset” if needed; for now it just clears everything */}
          <button
            type="button"
            onClick={() => setForm(initialForm)}
            className="text-gray-500 hover:text-gray-700 text-sm"
          >
            Reset
          </button>

          <div className="flex gap-4">
            <button
              type="button"
              onClick={handleCancel}
              className="px-6 py-2 bg-gray-200 rounded hover:bg-gray-300 transition"
            >
              Go Back
            </button>
            <button
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              Create
            </button>
          </div>
        </div>
      </form>
    </div>
  );
}
